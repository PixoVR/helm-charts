---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ include "fullname" $ -}}-services-deploy
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
  labels:
    tier: app
    purpose: deploy
    deployment: helm
    lifecycle: {{ required "REQUIRED: lifecycle" .Values.lifecycle }} 
spec:
  generators:
  - matrix:
      generators:
        - git:
            repoURL: git@github.com:{{- required "github_org" .Values.github_org -}}/{{- include "deploy_repo_name" $ -}}.git
            revision: {{ .Values.revision }}
            files:
            - path: {{ include "services_filepath" $ }}
        - clusters: {}
  template:
    metadata:
      {{- if .Values.multi_cluster }}
      name: '{{ "{{ nameNormalized }}" }}-{{- .Values.lifecycle }}-{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}-deploy'
      {{- else }}
      name: '{{- .Values.lifecycle }}-{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}-deploy'
      {{- end }}
      labels:
        {{- if .Values.multi_cluster }}
        cluster: '{{ "{{ nameNormalized }}" }}'
        {{- end }}
        deployment: helm
        tier: app
        purpose: deploy
        app: {{ .Values.app_name }}
        service: '{{ "{{ path.basename }}" }}'
        lifecycle: {{ required "REQUIRED: lifecycle" .Values.lifecycle }} 
      annotations:
        argocd-image-updater.argoproj.io/image-list: '{{ "{{ path.basename }}" }}=gcr.io/{{- required "app_project_id" .Values.app_project_id -}}/{{- .Values.app_name -}}/{{- .Values.lifecycle }}/{{ "{{ path.basename }}" }}'
        argocd-image-updater.argoproj.io/write-back-method: git
        argocd-image-updater.argoproj.io/git-branch: :image-updates

        argocd-image-updater.argoproj.io/{{ "{{ path.basename }}" }}.pull-secret: pullsecret:argocd/gcr-credentials 
        argocd-image-updater.argoproj.io/{{ "{{ path.basename }}" }}.force-update: "true"
        argocd-image-updater.argoproj.io/{{ "{{ path.basename }}" }}.update-strategy: latest

        argocd.argoproj.io/sync-wave: '{{ "{{ app.syncWave }}" }}'
      finalizers:
      - resources-finalizer.argocd.argoproj.io
    spec:
      project: {{ .Values.argocd_project }}
      source:
        repoURL: git@github.com:{{- .Values.github_org -}}/{{- .Values.repo_name -}}.git
        targetRevision: {{ .Values.target_revision }}
        path: '{{ "{{ path }}" }}/chart'
        helm:
          {{- if .Values.multi_cluster }}
          releaseName: '{{ "{{ nameNormalized }}" }}-{{- .Values.lifecycle }}-{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}'
          {{- else }}
          releaseName: '{{- .Values.lifecycle }}-{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}'
          {{- end }}
          ignoreMissingValueFiles: true
          values: |
            web-app:
              {{- if .Values.multi_cluster }}
              cpl_cluster_name: {{ .Values.cpl_cluster_name }}
              cluster_name: {{ "{{ nameNormalized }}" }}
              {{- end }}
              multi_cluster: {{ .Values.multi_cluster }}
              github_org: {{ .Values.github_org }}
              app_project_id: {{ required "app_project_id" .Values.app_project_id }}
              db_project_id: {{ required "db_project_id" .Values.db_project_id }}
              sa_project_id: {{ required "sa_project_id" .Values.sa_project_id }}
              gke_project_id: {{ required "gke_project_id" .Values.gke_project_id }}
              domain: '{{ required "app_domain" .Values.app_domain }}'
              lifecycle: {{ required "REQUIRED: lifecycle" .Values.lifecycle }} 
              app_code: {{ .Values.app_name }}
              microservice_name: '{{ "{{ path.basename }}" }}'
              sa_name: "{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}"
              infra:
                sa_name: "{{- .Values.app_name -}}-{{ "{{ path.basename }}" }}-infra"
              ksa_name: "{{- .Values.app_name -}}-workload"
              ingress:
                enabled: {{ .Values.app.ingress.enabled }}
                https: {{ .Values.app.ingress.https }}
              app_iam: 
                enabled: false
      destination:
        server: '{{ "{{ server }}" }}'
        namespace: '{{ include "deploy_namespace" $ }}'
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true


